y_1(E,I,a,b,j1,j2) := 1/j1*((a+b)/a)^2 + 1/j2*(b/a)^2 + b^2*(a+b)/(3*E*I);

float(y_1(210000, %pi*100^4/64, 800, 100, 120000, 120000))*1000; /* прогиб в мкм */

/* Chapter 12. Variational Formulation of Plane Beam Element */

/* shape functions */
Nbe(e) := matrix([ 1/4*(1-e)^2*(2+e), 1/8*l*(1-e)^2*(1+e), 1/4*(1+e)^2*(2-e), -1/8*l*(1+e)^2*(1-e)]);

Nbe : factor(Nbe(2*x/l-1));

/* curvature-displacement matrix */
Bbe : factor(diff(Nbe, x, 2));

/* Bbe(e) := factor(4/l^2 * diff(Nbe(e), e, 2)); */
/* Bbe(e); */

/* transpose(Bbe(e)) . Bbe(e); */

/* element stiffness matrix */
Ke_be(E,I,l) := integrate(E*I*(transpose(Bbe) . Bbe), x, 0, l);
/* Ke_be(E,I,l) := integrate(E*I*(transpose(Bbe(e)) . Bbe(e))*1/2*l, e, -1, 1); */

Ke_be(E,I,l);

/* consistent element node force vector */
f_e_be(q,l) := integrate(q*transpose(Nbe), x, 0, l);
/* f_e_be(q,l) := integrate(q*transpose(Nbe(e))*1/2*l, e, -1, 1); */

f_e_be(q,l); /* constant distributed force */

/* f_e_point_load_be(P,a,l) := f_e_be(q*dirac(a), l) */
f_e_point_load_be(P,a,l) := P*transpose(subst(a,x,Nbe));

f_e_point_load_be(P,a,l);
f_e_point_load_be(P,0,l);
f_e_point_load_be(P,l,l);
f_e_point_load_be(P,l/2,l);


/* Chapter 13. Advanced One-Dimensional Elements */

/* выводим то же самое, но через другие shape function
   плюс выводим всякие дополнительные вкусности.
*/

/* Многочлены Лежандра */
L(n,x) := factor(1/(2^n * n!)*diff((x^2-1)^n, x, n));

/* Ф-ии формы (shape functions) */
Legendre(e) := matrix([ L(0,e), L(1,e), L(2,e), L(3,e) ]);

Legendre(e);
L : subst(2*x/l - 1, e, Legendre(e));

/* covariance matrices */
Q(n) := integrate(transpose(diff(L,x,n)) . diff(L,x,n), x, 0, l);

Q0 : Q(0);
Q(1); /* не диагональная */
Q2 : Q(2);
Q3 : Q(3);

/* Generalized stiffness (in generalized coordinates) */

/* Rb = E*I -- bending rigidity */
/* Kcb -- матрица жесткости на изгиб в обобщенных координатах */
/* diff(L,x,2) -- curvature, E*I*v'' = M */
Kcb(Rb) := integrate(transpose(diff(L,x,2)) . (Rb * diff(L,x,2)), x, 0, l);

Kcb(Rb); /* = Rb*Q2; /* для случая с Rb = const */

/* деформация сдвига, Y зависит от модели среднего сдвига (mean-shear model) */
shear_distortion : Y * l^2 * diff(L,x,3);
/* Rs = G*As -- shear rigidity */
Kcs(Rs) := integrate(transpose(shear_distortion) . (Rs * shear_distortion), x, 0, l);

Kcs(Rs);

/* Преобразования из обобщенных координат в балочные */
/* для BE-балки */

/* u_e = Gb c */
Gb : matrix([1, -1, 1, -1], [0, 2/l, -6/l, 12/l], [1,1,1,1], [0, 2/l, 6/l, 12/l]);

/* c = Hb u_e */
Hb : invert(Gb);

Kbe(Rb) := transpose(Hb) . Kcb(Rb) . Hb;
Kbe(E*I);
Kbe(E*I) - Ke_be(E,I,l); /* одно и то же */

/* для балки Тимошенко (с Y = const) */

/* u_e = Gs c */
Gs : matrix([1, -1, 1, -1], [0, 2/l, -6/l, (12+120*Y)/l], [1,1,1,1], [0, 2/l, 6/l, (12+120*Y)/l]);

/* c = Hs u_e */
Hs : factor(invert(Gs));

Kt(Rb, Rs) := subst([Y = Rb/(Rs*l^2)], transpose(Hs) . (Kcb(Rb) + Kcs(Rs)) . Hs);
F : 12*E*I/(G*As*l^2); /* F=12*Y; Y=E*I/(G*As*l^2) */
Ktim : E*I/(l^3*(1+F)) * matrix([12, 6*l, -12, 6*l], [6*l, l^2*(4+F), -6*l, l^2*(2-F)], [-12, -6*l, 12, -6*l], [6*l, l^2*(2-F), -6*l, l^2*(4+F)]);
factor(Kt(E*I, G*As) - Ktim); /* одно и то же */


/* тестовый трехопорный ШУ */
K : subst(b,l,Kt(E*I, G*As));
K1 : matrix(
  [K[1][1], K[1][2], K[1][3], K[1][4],       0,       0,       0,       0],
  [K[2][1], K[2][2], K[2][3], K[2][4],       0,       0,       0,       0],
  [K[3][1], K[3][2], K[3][3], K[3][4],       0,       0,       0,       0],
  [K[4][1], K[4][2], K[4][3], K[4][4],       0,       0,       0,       0],
  [      0,       0,       0,       0,       0,       0,       0,       0],
  [      0,       0,       0,       0,       0,       0,       0,       0],
  [      0,       0,       0,       0,       0,       0,       0,       0],
  [      0,       0,       0,       0,       0,       0,       0,       0]);
K : subst(a,l,Kt(E*I, G*As));
K2 : matrix(
  [      0,       0,       0,       0,       0,       0,       0,       0],
  [      0,       0,       0,       0,       0,       0,       0,       0],
  [      0,       0, K[1][1], K[1][2], K[1][3], K[1][4],       0,       0],
  [      0,       0, K[2][1], K[2][2], K[2][3], K[2][4],       0,       0],
  [      0,       0, K[3][1], K[3][2], K[3][3], K[3][4],       0,       0],
  [      0,       0, K[4][1], K[4][2], K[4][3], K[4][4],       0,       0],
  [      0,       0,       0,       0,       0,       0,       0,       0],
  [      0,       0,       0,       0,       0,       0,       0,       0]);
K : subst(c,l,Kt(E*I, G*As));
K3 : matrix(
  [      0,       0,       0,       0,       0,       0,       0,       0],
  [      0,       0,       0,       0,       0,       0,       0,       0],
  [      0,       0,       0,       0,       0,       0,       0,       0],
  [      0,       0,       0,       0,       0,       0,       0,       0],
  [      0,       0,       0,       0, K[1][1], K[1][2], K[1][3], K[1][4]],
  [      0,       0,       0,       0, K[2][1], K[2][2], K[2][3], K[2][4]],
  [      0,       0,       0,       0, K[3][1], K[3][2], K[3][3], K[3][4]],
  [      0,       0,       0,       0, K[4][1], K[4][2], K[4][3], K[4][4]]);
KR1 : matrix(
  [      0,       0,       0,       0,       0,       0,       0,       0],
  [      0,       0,       0,       0,       0,       0,       0,       0],
  [      0,       0,      j1,       0,       0,       0,       0,       0],
  [      0,       0,       0,       0,       0,       0,       0,       0],
  [      0,       0,       0,       0,       0,       0,       0,       0],
  [      0,       0,       0,       0,       0,       0,       0,       0],
  [      0,       0,       0,       0,       0,       0,       0,       0],
  [      0,       0,       0,       0,       0,       0,       0,       0]);
KR2 : matrix(
  [      0,       0,       0,       0,       0,       0,       0,       0],
  [      0,       0,       0,       0,       0,       0,       0,       0],
  [      0,       0,       0,       0,       0,       0,       0,       0],
  [      0,       0,       0,       0,       0,       0,       0,       0],
  [      0,       0,       0,       0,      0/*j2*/,       0,       0,       0],
  [      0,       0,       0,       0,       0,       0,       0,       0],
  [      0,       0,       0,       0,       0,       0,       0,       0],
  [      0,       0,       0,       0,       0,       0,       0,       0]);
KR3 : matrix(
  [      0,       0,       0,       0,       0,       0,       0,       0],
  [      0,       0,       0,       0,       0,       0,       0,       0],
  [      0,       0,       0,       0,       0,       0,       0,       0],
  [      0,       0,       0,       0,       0,       0,       0,       0],
  [      0,       0,       0,       0,       0,       0,       0,       0],
  [      0,       0,       0,       0,       0,       0,       0,       0],
  [      0,       0,       0,       0,       0,       0,      j3,       0],
  [      0,       0,       0,       0,       0,       0,       0,       0]);
K : K1 + K2 + K3 + KR1 + KR2 + KR3;
y1 : first(expand(factor(invert(K) . [f1, 0, 0, 0, 0, 0, 0, 0])[1]));
/*y1ab : subst([a = a+c], y1); здесь y1 для j3=0
y1abj3 : subst([j2 = j3], y1ab);
factor(y1-y1abj3) = 0; здесь y1 для j2=0 => одно и то же */
ktim(nu, m) := 6*(1+nu)*(1+m^2)^2 / ((7+6*nu)*(1+m^2)^2 + (20+12*nu)*m^2);
/* nu -- коэффициент Пуассона */
Astim(nu, din, dout) := ktim(nu, din/dout) * %pi * (dout^2 - din^2) / 4;
test(d, Gmult) := float(subst([a=800, b=100, j1=120000, j2=120000, j3=0, E=210000, I=%pi*d^4/64, G=80000*Gmult, As=Astim(0.3, 0, d)], y1))*1000;
/*test(d, Gmult) := float(subst([a=200, c=600, b=100, j1=120000, j2=0, j3=120000, E=210000, I=%pi*d^4/64, G=80000*Gmult, As=Astim(0.3, 0, d)], y1))*1000;*/
test(100, 10000); /* как BE */
test(100, 1);     /* как Тимошенко */
plot2d(test(d, 1) / f1, [d,100, 1000]);
plot2d((test(d, 1) / test(d, 1000000) - 1) * 100, [d,10, 1000]);
/* в нашем ШУ максимальная разница 1.8%
  но это потому, что он тонкий.
  причем разница уменьшается при увеличении диаметра,
  т.к. уже опоры играют ведущую роль в прогибе.
  если сделать опоры абсолютно жесткими, то при увеличении диаметра
  разница может сотавлять десятки и даже сотни процентов.
*/
float(subst([c=800-24, b=100, a=24, j1=120000, j2=120000, j3=120000, E=210000, I=%pi*100^4/64], y1))*1000;

y1 : first(expand(factor(invert(float(subst([c=800-24, b=100, a=24, j1=120000, j2=120000, j3=120000, E=210000, I=%pi*100^4/64], K))) . [f1, 0, 0, 0, 0, 0, 0, 0])[1]));
float(y1*1000);
